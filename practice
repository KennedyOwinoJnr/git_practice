{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOONWuK37ekKh9iN7Xnz3/b",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/KennedyOwinoJnr/git_practice/blob/demo_branch/practice\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "0IChkW4ertU3"
      },
      "outputs": [],
      "source": [
        "def get_average(mylist):\n",
        "  length=len(mylist)\n",
        "  total=sum(mylist)\n",
        "\n",
        "  return total/length\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "list_numbers=[]\n",
        "\n",
        "for number in range(10):\n",
        "  number= input('Please enter the number:')\n",
        "\n",
        "  list_numbers.append(int(number))\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zWf_Be7EstOU",
        "outputId": "eefe1da4-7735-4840-9173-7794b66aadd2"
      },
      "execution_count": null,
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Please enter the number:40\n",
            "Please enter the number:43\n",
            "Please enter the number:45\n",
            "Please enter the number:90\n",
            "Please enter the number:86\n",
            "Please enter the number:99\n",
            "Please enter the number:33\n",
            "Please enter the number:88\n",
            "Please enter the number:345\n",
            "Please enter the number:398\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "get_average(list_numbers)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RgthAgB7tJ5v",
        "outputId": "1a2bb176-f353-477d-d304-c4c4cd1fdde5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "126.7"
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "numbers=[20,59, 23]\n",
        "\n",
        "for number in numbers:\n",
        "    print(f'multiplictaion table of {number}')\n",
        "    count=0\n",
        "    while count <=10:\n",
        "      count+=1\n",
        "      print(f'{count} * {number} = {count*number}')"
      ],
      "metadata": {
        "id": "7C20LiavtXnL",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3f3cf2be-1a16-4e4a-de7a-f936b742903f"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "multiplictaion table of 20\n",
            "1 * 20 = 20\n",
            "2 * 20 = 40\n",
            "3 * 20 = 60\n",
            "4 * 20 = 80\n",
            "5 * 20 = 100\n",
            "6 * 20 = 120\n",
            "7 * 20 = 140\n",
            "8 * 20 = 160\n",
            "9 * 20 = 180\n",
            "10 * 20 = 200\n",
            "11 * 20 = 220\n",
            "multiplictaion table of 59\n",
            "1 * 59 = 59\n",
            "2 * 59 = 118\n",
            "3 * 59 = 177\n",
            "4 * 59 = 236\n",
            "5 * 59 = 295\n",
            "6 * 59 = 354\n",
            "7 * 59 = 413\n",
            "8 * 59 = 472\n",
            "9 * 59 = 531\n",
            "10 * 59 = 590\n",
            "11 * 59 = 649\n",
            "multiplictaion table of 23\n",
            "1 * 23 = 23\n",
            "2 * 23 = 46\n",
            "3 * 23 = 69\n",
            "4 * 23 = 92\n",
            "5 * 23 = 115\n",
            "6 * 23 = 138\n",
            "7 * 23 = 161\n",
            "8 * 23 = 184\n",
            "9 * 23 = 207\n",
            "10 * 23 = 230\n",
            "11 * 23 = 253\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#use the comprehension method to extract the odd numbers in a set\n",
        "nums= set(range(1000))\n",
        "odd_numbes = [num for num in nums if num %2 !=0]\n",
        "\n",
        "odd_numbes[:10]"
      ],
      "metadata": {
        "id": "Xe8HvVMi3zg5",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3799e533-2231-4991-d848-96e22a126618"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[1, 3, 5, 7, 9, 11, 13, 15, 17, 19]"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#using list comprehension to extract first character of strin from words\n",
        "\n",
        "words= ['Carbon', 'Omnium', 'mercury','potassium']\n",
        "\n",
        "\n",
        "first_character= [word[0] for word in words]\n",
        "first_character"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IpOjS31ebHKP",
        "outputId": "50806db1-4ce5-4b6d-cf5f-05163edaa724"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['C', 'O', 'm', 'p']"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#(build a list of all names stating with 'R' using list comprehension.\n",
        "   # question mark at the end of each name)\n",
        "\n",
        "names=['Rand', 'Robert', 'Alex', 'Ranjit', 'Charlie', 'Mike']\n",
        "\n",
        "stats_with_R= [name +'?' for name in names if name[0] == 'R' ]\n",
        "\n",
        "stats_with_R"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "q15in5Pzdwem",
        "outputId": "25c93468-e8e3-41d6-fe39-9a1140f136e0"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['Rand?', 'Robert?', 'Ranjit?']"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Dictionary comprehension\n",
        "\n",
        "line1 = ['USA', 'UK', 'Cananda', 'Thailand']\n",
        "line2 = ['DC', 'London',  'Ottawa','Bangkok']\n",
        "\n",
        "#pair countres with cities\n",
        "\n",
        "type({line1[i]:line2[i] for i in range(len(line1))})\n",
        "\n",
        "#alternatively\n",
        "\n",
        "{k:v  for k, v in zip(line1, line2)}\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mHDtwY84iz0Q",
        "outputId": "cfadb767-da53-4a05-9676-8bb585b44d77"
      },
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'USA': 'DC', 'UK': 'London', 'Cananda': 'Ottawa', 'Thailand': 'Bangkok'}"
            ]
          },
          "metadata": {},
          "execution_count": 32
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Dictionary comprehension\n",
        "\n",
        "#make each character in the list of keys below with a value of fictional character\n",
        "\n",
        "chars= ['Pinochio', 'gilgamesh', 'kumar partel', 'tobby Flander']\n",
        "\n",
        "{name: 'fictional character' for name in chars}\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LK0G39f-krgp",
        "outputId": "f544df7f-565f-4d34-cd73-12f80a9543a1"
      },
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'Pinochio': 'fictional character',\n",
              " 'gilgamesh': 'fictional character',\n",
              " 'kumar partel': 'fictional character',\n",
              " 'tobby Flander': 'fictional character'}"
            ]
          },
          "metadata": {},
          "execution_count": 33
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Nesting\n",
        "#There is an excercise\n",
        "\n",
        "#Functions\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "DY1WIhYlnOhh"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}